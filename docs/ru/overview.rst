============================
Обзор архитектуры фреймворка
============================

Selenium Webdriver
==================

В качестве основы для работы авто-тестов используется джаваскриптовая версия веб-драйвера selenum.

Mocha и Grunt
=============

В качестве базового фрейворка для написания тест-сценариев выбран Mocha, который позволяет писать код тестов в
BDD-стиле, в сочетании с библиотекой should, который позволяет писать ассерты (матчеры) в довольно красивом стиле.

Для автоматизации задач запуска тестов используется популярный Grunt. 

CoffeeScript
============

Основным поддерживаемым языком для тестов и вспомогательных классов является coffee-script. Он компилируется в
javascript, однако не в чистом виде. Происходит препроцессинг, при котором добавляются некоторые вспомогательные
строки кода, обеспечивающие корректную работу конструкций фреймворка. Поэтому просто так заменить coffee-script на
javascript не получится, хотя сделать поддержку в препроцессоре несложно.

Вспомогательные классы
======================

Page Object
-----------

PageObject -- общепринятый паттерн для разработки автотестов. Идея заключается в том, чтобы изолировать все привязки к
DOM (например, селекторы) в отдельных классах-сервисах (page objects), которые предоставляют API для тест-сценариев.
Это позволяет в случае изменения вёрстки исправлять только этот специальный класс и не трогать тесты (благодаря
сохранению API).

Page-object является абстракцией целой страницы или какого-либо блока страницы.

В Stof базовый класс PageObject позволяет компактным декларативным способом объявить элементы DOM-селекторами, а также
селектор элемента, с помощью которого определяется "готовность" блока, абстракцией которого является данный PageObject.

Helper
------

Часто бывает так, что в разный тестовых сценариях приходится повторять одни и те же действия. Например, в самом
начале обычно нужно залогинить пользователя. Для того, чтобы не копи-пастить подобные куски блока, Stof поддерживает
ещё один тип специальных классов -- "хелперы", которые призваны убирать дублирование кода в тестовых сценариях.
