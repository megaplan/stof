*************
Быстрый старт
*************

Начальные условия
=================

В данном учебнике предполагается, что у вас имеется некий проект с веб-приложением, для которого вы хотите разработать
автоматизированные тесты. Проект может быть разработан на любом языке. Для разработки тестов с использованием фреймворка
Stof мы будем использовать стек инструментов Node.js: npm, grunt, mocha. Поэтому у вас должен быть установлен Node.js и
npm.

Stof по-умолчанию запускает тесты на браузере *Firefox*, поэтому для успешного прохождения данного учебника, этот
бразуер должен быть установлен на машине разработчика.

Кроме того, на данный момент для "компиляции" тестов используется сборщик фреймворка CordJS, однако в скором будущем
эта зависимость будет ликвидирована.

Структура проекта
-----------------

Stof пропагандирует идею размещения кода тестов в репозитории вместе с исходниками проекта, которые они тесируют,
поэтому исходники тестов располагаются в папке ``test`` в корне проекта. Однако, нет никаких препятствий для того, чтобы
расположить тесты в отдельном репозитории.


Bootstrap
=========

Подпроект с тестами
-------------------

Для начала создадим директорию ``test`` со структурой, подходящей для фреймворка Stof:

.. code-block:: bash

  cd path/to/project
  mkdir -p test/bundles/example
  mkdir -p test/config

Код тестов в Stof сгруппирован по так называмым *бандлам*. Бандлы помогают разработчику ориентироваться, когда тестов
много. Разработчик тестов волен выбирать самостоятельно принцип, по которому он будет раскидывать тесты по бандлам.
Зачастую бандлы соответсвуют бизнес-логическим модулям тестируемого приложения. Папка ``test/bundles`` является
корнем для всех тест-бандлов. В данном случае, мы создали бандл с названием ``example``.

Папка ``test/config`` предназначена для конфигурационных файлов тестов (об этом позже).

Сами тест-сценарии должны располагаться в папке ``specs`` внутри бандла:

.. code-block:: bash

  cd test/bundles/example
  mkdir specs
  cd specs
  touch helloWorld.coffee

Отредактируйте файл ``helloWorld.coffee``::

  describe "Google search page", ->
    it "should show some results for 'hello world' search string", ->
      go "http://google.com"

Вы только что создали тест-сценарий, который открывает в браузере стартовую страницу Google. Но для того, чтобы его
запустить, понадобится ещё дополнительная подготовка.

Внешние зависимости
-------------------

Для работы тестов необходимо установить некотоыре npm пакеты:

.. code-block:: bash

  sudo npm install -g mocha
  cd path/to/project
  npm install selenium-webdriver
  npm install should

Обратите внимание, что ``mocha`` должна быть установлена глобально (ключик ``-g``), чтобы команда ``mocha`` была
доступна через CLI.

.. todo::

  Нужно убрать ``npm install selenium-webdriver`` и добавить ``npm install stof``, когда stof вынесем отдельно

.. todo::

  Добавить раздел про конфиг, если не удастся убрать его обязательность.

Компиляция тестов
-----------------

Прежде, чем запустить тесты, исходники необходимо скомпилировать из CoffeeScript в Javascript с дополнительными
манипуляциями для корректной работы в рамках Stof. Сборщик ``cordjs`` поддерживает компиляцию stof-тестов,
соответственно необходимо просто выполнить команду:

.. code-block:: bash

  cd path/to/project
  cordjs build

В результате скомпилированные тесты окажутся в папке ``target/test``. Если добавить к команде ключик ``-w``, то сборщик
будет слушать изменения в файлах тестов и автоматически их перекомпилировать без необходимости запускать команду сборки
каждый раз.

Установка Selenium Server
-------------------------

Для запуска тестов на локальной машине необходимо установить и запустить *Selenuim Server*, который будет запускать нужный
браузер, принимать и исполнять на нём команды, которые запрограммированы в тестах.

Скачать Selenium Server можно на странице http://docs.seleniumhq.org/download/. На момент написания документации
последняя версия 2.42.2. Необходимо положить jar-файл в любое удобное место и запустить:

.. code-block:: bash

  cd ~/bin
  wget http://selenium-release.storage.googleapis.com/2.42/selenium-server-standalone-2.42.2.jar
  java -jar selenium-server-standalone-2.42.2.jar

Запуск тестов
=============

Теперь можно попробовать запустить тесты:

.. code-block:: bash

  cd path/to/project
  mocha -r stof -r should -t 200000 -R spec target/test/**/specs/* --stof-root-dir=target/test

В результате откроется Firefox с главной страницей Google. В консоли должно появиться подобное::

  Google search page
    ✓ should show some results for 'hello world' search string (2839ms)


  1 passing (3s)

Поздравляем! Вы успешно запустили свой первый selenuim-тест :)
